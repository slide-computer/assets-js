import{Actor as e,hash as t}from"@dfinity/agent";import n from"mime-types";import c from"p-limit";const i=({IDL:e})=>{const t=e.Record({}),n=e.Nat,c=e.Text,i=e.Record({key:c,content_type:e.Text}),o=e.Record({key:c,content_encoding:e.Text}),r=e.Record({key:c}),a=e.Nat,s=e.Record({key:c,sha256:e.Opt(e.Vec(e.Nat8)),chunk_ids:e.Vec(a),content_encoding:e.Text}),l=e.Variant({CreateAsset:i,UnsetAssetContent:o,DeleteAsset:r,SetAssetContent:s,Clear:t}),u=e.Tuple(e.Text,e.Text),d=e.Record({url:e.Text,method:e.Text,body:e.Vec(e.Nat8),headers:e.Vec(u)}),h=e.Record({key:c,sha256:e.Opt(e.Vec(e.Nat8)),index:e.Nat,content_encoding:e.Text}),y=e.Record({token:e.Opt(h),body:e.Vec(e.Nat8)}),_=e.Variant({Callback:e.Record({token:h,callback:e.Func([h],[e.Opt(y)],["query"])})}),p=e.Record({body:e.Vec(e.Nat8),headers:e.Vec(u),streaming_strategy:e.Opt(_),status_code:e.Nat16}),m=e.Int;return e.Service({authorize:e.Func([e.Principal],[],[]),clear:e.Func([t],[],[]),commit_batch:e.Func([e.Record({batch_id:n,operations:e.Vec(l)})],[],[]),create_asset:e.Func([i],[],[]),create_batch:e.Func([e.Record({})],[e.Record({batch_id:n})],[]),create_chunk:e.Func([e.Record({content:e.Vec(e.Nat8),batch_id:n})],[e.Record({chunk_id:a})],[]),delete_asset:e.Func([r],[],[]),get:e.Func([e.Record({key:c,accept_encodings:e.Vec(e.Text)})],[e.Record({content:e.Vec(e.Nat8),sha256:e.Opt(e.Vec(e.Nat8)),content_type:e.Text,content_encoding:e.Text,total_length:e.Nat})],["query"]),get_chunk:e.Func([e.Record({key:c,sha256:e.Opt(e.Vec(e.Nat8)),index:e.Nat,content_encoding:e.Text})],[e.Record({content:e.Vec(e.Nat8)})],["query"]),http_request:e.Func([d],[p],["query"]),http_request_streaming_callback:e.Func([h],[e.Opt(y)],["query"]),list:e.Func([e.Record({})],[e.Vec(e.Record({key:c,encodings:e.Vec(e.Record({modified:m,sha256:e.Opt(e.Vec(e.Nat8)),length:e.Nat,content_encoding:e.Text})),content_type:e.Text}))],["query"]),set_asset_content:e.Func([s],[],[]),store:e.Func([e.Record({key:c,content:e.Vec(e.Nat8),sha256:e.Opt(e.Vec(e.Nat8)),content_type:e.Text,content_encoding:e.Text})],[],[]),unset_asset_content:e.Func([o],[],[])})},o=["concurrency","maxSingleFileSize","maxChunkSize","eventListener"];"undefined"!=typeof process&&null!=process.versions&&process;const r=async(e,c)=>{var i,o,r;let a,s=null==c?void 0:c.fileName,l=null==c?void 0:c.contentType,u=null!=(i=null==c?void 0:c.path)?i:"/";if(e instanceof Uint8Array)a=Array.from(e);else if(Array.isArray(e)&&e.every(e=>"number"==typeof e))a=e;else{if(!(e instanceof Blob))throw"Asset could not be read (File, Blob, ArrayBuffer, Uint8Array and number[] are valid";if(a=await new Promise(t=>{const n=new FileReader;n.addEventListener("load",()=>{t(Array.from(Uint8Array.from(n.result)))}),n.readAsArrayBuffer(e)}),!s){if(!(e instanceof File))throw'"fileName" property is required in options';s=e.name}l||(l=e.type)}u.startsWith("/")||(u="/"+u),u.endsWith("/")||(u+="/");const d=null!=(o=null==c?void 0:c.contentEncoding)?o:"identity",h=null!=(r=null==c?void 0:c.sha256)?r:Array.from(new Uint8Array(t(new Uint8Array(a))));return l||(l=n.lookup(s)||"application/octet-stream"),{fileName:s,path:u,content:a,contentType:l,contentEncoding:d,sha256:h}};class a{constructor(t){var n=this;let{concurrency:a,maxSingleFileSize:s,maxChunkSize:l,eventListener:u}=t,d=function(e,t){if(null==e)return{};var n,c,i={},o=Object.keys(e);for(c=0;c<o.length;c++)t.indexOf(n=o[c])>=0||(i[n]=e[n]);return i}(t,o);this._actor=void 0,this._pLimit=void 0,this._maxSingleFileSize=void 0,this._maxChunkSize=void 0,this._eventListener=void 0,this.list=()=>this._pLimit(()=>this._actor.list({})),this.batch=()=>{const e=[];return{commit:async function(){const{batch_id:t}=await n._pLimit(()=>n._actor.create_batch({})),c=(await Promise.all(e.map(e=>e(t)))).flat();await n._pLimit(()=>n._actor.commit_batch({batch_id:t,operations:c})),c.forEach(e=>{"DeleteAsset"in e&&n._eventListener({key:e.DeleteAsset.key,type:"delete"})})},insert:async function(t,c){const i=await r(t,c),o=[i.path,i.fileName].join("");return n._eventListener({key:o,type:"insert",progress:{current:0,total:i.content.length}}),e.push(async function(e){const t=i.content.reduce((e,t,c)=>{const i=Math.floor(c/n._maxChunkSize);return e[i]||(e[i]=[]),e[i].push(t),e},[]);let c=0;const r=await Promise.all(t.map(async function(t){const{chunk_id:r}=await n._pLimit(()=>n._actor.create_chunk({content:t,batch_id:e}));return c+=t.length,n._eventListener({key:o,type:"insert",progress:{current:c,total:i.content.length}}),r}));return[{CreateAsset:{key:o,content_type:i.contentType}},{SetAssetContent:{key:o,sha256:i.sha256?[i.sha256]:[],chunk_ids:r,content_encoding:i.contentEncoding}}]}),o},delete:async function(t){e.push(async function(){return[{DeleteAsset:{key:t}}]})}}},this.insert=async function(e,t){const c=await r(e,t),i=[c.path,c.fileName].join("");if(c.content.length<=n._maxSingleFileSize)n._eventListener({key:i,type:"insert",progress:{current:0,total:c.content.length}}),await n._pLimit(()=>n._actor.store({key:i,content:c.content,content_type:c.contentType,sha256:c.sha256?[c.sha256]:[],content_encoding:c.contentEncoding}));else{const e=n.batch();await e.insert(c.content,c),await e.commit()}return i},this.delete=async function(e){await n._pLimit(()=>n._actor.delete_asset({key:e})),n._eventListener({key:e,type:"delete"})},this._actor=e.createActor(i,d),this._pLimit=c(null!=a?a:32),this._maxSingleFileSize=null!=s?s:45e4,this._maxChunkSize=null!=l?l:19e5,this._eventListener=null!=u?u:()=>null}}export{a as AssetManager};
//# sourceMappingURL=index.modern.js.map
